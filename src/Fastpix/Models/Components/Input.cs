//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Fastpix.Models.Components
{
    using Fastpix.Models.Components;
    using Fastpix.Utils;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    

    public class InputType
    {
        private InputType(string value) { Value = value; }

        public string Value { get; private set; }
        public static InputType VideoInput { get { return new InputType("VideoInput"); } }
        
        public static InputType WatermarkInput { get { return new InputType("WatermarkInput"); } }
        
        public static InputType AudioInput { get { return new InputType("AudioInput"); } }
        
        public static InputType SubtitleInput { get { return new InputType("SubtitleInput"); } }
        
        public static InputType Null { get { return new InputType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(InputType v) { return v.Value; }
        public static InputType FromString(string v) {
            switch(v) {
                case "VideoInput": return VideoInput;
                case "WatermarkInput": return WatermarkInput;
                case "AudioInput": return AudioInput;
                case "SubtitleInput": return SubtitleInput;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for InputType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((InputType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(Input.InputConverter))]
    public class Input {
        public Input(InputType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public VideoInput? VideoInput { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public WatermarkInput? WatermarkInput { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public AudioInput? AudioInput { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public SubtitleInput? SubtitleInput { get; set; }

        public InputType Type { get; set; }


        public static Input CreateVideoInput(VideoInput videoInput) {
            InputType typ = InputType.VideoInput;

            Input res = new Input(typ);
            res.VideoInput = videoInput;
            return res;
        }

        public static Input CreateWatermarkInput(WatermarkInput watermarkInput) {
            InputType typ = InputType.WatermarkInput;

            Input res = new Input(typ);
            res.WatermarkInput = watermarkInput;
            return res;
        }

        public static Input CreateAudioInput(AudioInput audioInput) {
            InputType typ = InputType.AudioInput;

            Input res = new Input(typ);
            res.AudioInput = audioInput;
            return res;
        }

        public static Input CreateSubtitleInput(SubtitleInput subtitleInput) {
            InputType typ = InputType.SubtitleInput;

            Input res = new Input(typ);
            res.SubtitleInput = subtitleInput;
            return res;
        }

        public static Input CreateNull() {
            InputType typ = InputType.Null;
            return new Input(typ);
        }

        public class InputConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(Input);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new Input(InputType.AudioInput)
                    {
                        AudioInput = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<AudioInput>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(AudioInput), new Input(InputType.AudioInput), "AudioInput"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Input(InputType.SubtitleInput)
                    {
                        SubtitleInput = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<SubtitleInput>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(SubtitleInput), new Input(InputType.SubtitleInput), "SubtitleInput"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Input(InputType.WatermarkInput)
                    {
                        WatermarkInput = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<WatermarkInput>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(WatermarkInput), new Input(InputType.WatermarkInput), "WatermarkInput"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Input(InputType.VideoInput)
                    {
                        VideoInput = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<VideoInput>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(VideoInput), new Input(InputType.VideoInput), "VideoInput"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                Input res = (Input)value;
                if (InputType.FromString(res.Type).Equals(InputType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.VideoInput != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.VideoInput));
                    return;
                }
                if (res.WatermarkInput != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.WatermarkInput));
                    return;
                }
                if (res.AudioInput != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.AudioInput));
                    return;
                }
                if (res.SubtitleInput != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.SubtitleInput));
                    return;
                }

            }

        }

    }
}