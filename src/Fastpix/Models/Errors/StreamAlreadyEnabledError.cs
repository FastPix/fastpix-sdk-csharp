//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by FastPix (https://FastPix.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Fastpix.Models.Errors
{
    using Fastpix.Models.Components;
    using Fastpix.Utils;
    using Newtonsoft.Json;
    using System;
    using System.Net.Http;

    public class StreamAlreadyEnabledErrorPayload
    {
        /// <summary>
        /// Indicates whether the request was successful or not.
        /// </summary>
        [JsonProperty("success")]
        public bool? Success { get; set; }

        /// <summary>
        /// Contains details explaining why the request failed.
        /// </summary>
        [JsonProperty("error")]
        public StreamAlreadyEnabledErrorError? Error { get; set; }

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;
    }

    public class StreamAlreadyEnabledError : FastPixException
    {
        /// <summary>
        ///  The original data that was passed to this exception.
        /// </summary>
        public StreamAlreadyEnabledErrorPayload Payload { get; }

        [Obsolete("This field will be removed in a future release, please migrate away from it as soon as possible. Use StreamAlreadyEnabledError.Payload.Success instead.")]
        public bool? Success { get; set; }

        [Obsolete("This field will be removed in a future release, please migrate away from it as soon as possible. Use StreamAlreadyEnabledError.Payload.Error instead.")]
        public StreamAlreadyEnabledErrorError? Error { get; set; }

        [Obsolete("This field will be removed in a future release, please migrate away from it as soon as possible. Use StreamAlreadyEnabledError.Payload.HttpMeta instead.")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        private static string ErrorMessage(StreamAlreadyEnabledErrorPayload payload, string body)
        {
            string? message = payload.Error?.Message;
            if (!string.IsNullOrEmpty(message))
            {
                return message;
            }

            return "API error occurred";
        }

        public StreamAlreadyEnabledError(
            StreamAlreadyEnabledErrorPayload payload,
            HttpRequestMessage request,
            HttpResponseMessage response,
            string body
        ): base(ErrorMessage(payload, body), request, response, body)
        {
           Payload = payload;

           #pragma warning disable CS0618
           Success = payload.Success;
           Error = payload.Error;
           HttpMeta = payload.HttpMeta;
           #pragma warning restore CS0618
        }
    }

}