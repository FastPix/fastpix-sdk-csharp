//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by FastPix (https://FastPix.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Fastpix.Models.Errors
{
    using Fastpix.Models.Components;
    using Fastpix.Models.Errors;
    using Fastpix.Utils;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;

    public class BadRequestType
    {
        private BadRequestType(string value) { Value = value; }

        public string Value { get; private set; }

        public static BadRequestType TrialPlanRestrictionError { get { return new BadRequestType("TrialPlanRestrictionError"); } }

        public static BadRequestType StreamAlreadyEnabledError { get { return new BadRequestType("StreamAlreadyEnabledError"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(BadRequestType v) { return v.Value; }
        public static BadRequestType FromString(string v) {
            switch(v) {
                case "TrialPlanRestrictionError": return TrialPlanRestrictionError;
                case "StreamAlreadyEnabledError": return StreamAlreadyEnabledError;
                default: throw new ArgumentException("Invalid value for BadRequestType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((BadRequestType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    /// <summary>
    /// Bad Request â€“ Stream is either already enabled or cannot be enabled on trial plan.
    /// </summary>
    [JsonConverter(typeof(BadRequest.BadRequestConverter))]
    public class BadRequest
    {
        public BadRequest(BadRequestType type)
        {
            Type = type;
        }

        [FastPixMetadata("form:explode=true")]
        public TrialPlanRestrictionErrorPayload? TrialPlanRestrictionErrorPayload { get; set; }

        [FastPixMetadata("form:explode=true")]
        public StreamAlreadyEnabledErrorPayload? StreamAlreadyEnabledErrorPayload { get; set; }

        public BadRequestType Type { get; set; }
        public static BadRequest CreateTrialPlanRestrictionError(TrialPlanRestrictionErrorPayload trialPlanRestrictionErrorPayload)
        {
            BadRequestType typ = BadRequestType.TrialPlanRestrictionError;

            BadRequest res = new BadRequest(typ);
            res.TrialPlanRestrictionErrorPayload = trialPlanRestrictionErrorPayload;
            return res;
        }
        public static BadRequest CreateStreamAlreadyEnabledError(StreamAlreadyEnabledErrorPayload streamAlreadyEnabledErrorPayload)
        {
            BadRequestType typ = BadRequestType.StreamAlreadyEnabledError;

            BadRequest res = new BadRequest(typ);
            res.StreamAlreadyEnabledErrorPayload = streamAlreadyEnabledErrorPayload;
            return res;
        }

        public class BadRequestConverter : JsonConverter
        {
            public override bool CanConvert(System.Type objectType) => objectType == typeof(BadRequest);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null)
                {
                    throw new InvalidOperationException("Received unexpected null JSON value");
                }

                var json = JRaw.Create(reader).ToString();
                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new BadRequest(BadRequestType.TrialPlanRestrictionError)
                    {
                        TrialPlanRestrictionErrorPayload = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<TrialPlanRestrictionErrorPayload>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(TrialPlanRestrictionErrorPayload), new BadRequest(BadRequestType.TrialPlanRestrictionError), "TrialPlanRestrictionErrorPayload"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new BadRequest(BadRequestType.StreamAlreadyEnabledError)
                    {
                        StreamAlreadyEnabledErrorPayload = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<StreamAlreadyEnabledErrorPayload>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(StreamAlreadyEnabledErrorPayload), new BadRequest(BadRequestType.StreamAlreadyEnabledError), "StreamAlreadyEnabledErrorPayload"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null)
                {
                    throw new InvalidOperationException("Unexpected null JSON value.");
                }

                BadRequest res = (BadRequest)value;

                if (res.TrialPlanRestrictionErrorPayload != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.TrialPlanRestrictionErrorPayload));
                    return;
                }

                if (res.StreamAlreadyEnabledErrorPayload != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.StreamAlreadyEnabledErrorPayload));
                    return;
                }
            }

        }

    }
}